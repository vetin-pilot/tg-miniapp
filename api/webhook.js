// /api/webhook.js
const BOT_TOKEN = process.env.BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN;
const API = `https://api.telegram.org/bot${BOT_TOKEN}`;
const PERIOD = parseInt(process.env.SUBSCRIPTION_PERIOD_SEC || '2592000', 10); // 30 –¥–Ω–µ–π
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID || ''; // numeric user id (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
const ADMIN_USERNAME = process.env.ADMIN_USERNAME || process.env.ADMIN_USER || ''; // –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: @username (–¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ)
const SECRET = process.env.WEBHOOK_SECRET || '';

export default async function handler(req, res) {
    try {
        if (req.method !== 'POST') {
            return res.status(200).send('ok'); // Telegram –æ–∂–∏–¥–∞–µ—Ç 200
        }
        if (!BOT_TOKEN) {
            console.error('WEBHOOK: missing BOT_TOKEN');
            return res.status(200).json({ ok: true });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤–µ–±—Ö—É–∫–∞ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
        if (SECRET) {
            const got = req.headers['x-telegram-bot-api-secret-token'];
            if (!got || got !== SECRET) {
                console.error('WEBHOOK: secret token mismatch, ignoring update');
                return res.status(200).json({ ok: true });
            }
        }

        const update = req.body;
        console.log('WEBHOOK UPDATE:', JSON.stringify(update));

        // 1) –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ pre_checkout_query ‚Äî –∏–Ω–∞—á–µ ¬´—Å–ø–∏–Ω–Ω–µ—Ä¬ª
        if (update.pre_checkout_query) {
            const id = update.pre_checkout_query.id;
            await fetch(`${API}/answerPreCheckoutQuery`, {
                method: 'POST',
                headers: { 'content-type': 'application/json' },
                body: JSON.stringify({ pre_checkout_query_id: id, ok: true })
            });
            console.log('answered pre_checkout_query OK');
            return res.status(200).json({ ok: true });
        }

        // 2) –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂ ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        const successful = update.message?.successful_payment || update.edited_message?.successful_payment;
        if (successful) {
            const m = update.message || update.edited_message;
            const chat_id = m.chat.id;
            const user_id = String(m.from.id);
            const now = Math.floor(Date.now() / 1000);

            try {
                const { setUser } = await import('./_db.js'); // –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç
                await setUser(user_id, { sub_last_paid_at: now, sub_period_sec: PERIOD });
            } catch (e) {
                console.error('setUser error:', e);
            }

            // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫—É
            await fetch(`${API}/sendMessage`, {
                method: 'POST',
                headers: { 'content-type': 'application/json' },
                body: JSON.stringify({ chat_id, text: '–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ PRO –∞–∫—Ç–∏–≤–Ω–∞.' })
            });

            // –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω ADMIN_CHAT_ID –∏–ª–∏ ADMIN_USERNAME)
            try {
                if (ADMIN_CHAT_ID || ADMIN_USERNAME) {
                    const payer =
                        m.from.username ? '@' + m.from.username :
                        `${m.from.first_name || ''} ${m.from.last_name || ''}`.trim() || user_id;
                    const payload = successful.invoice_payload || '';
                    const total = successful.total_amount;
                    const currency = successful.currency;
                    const kind = payload?.startsWith('sub_')
                        ? '–ü–æ–¥–ø–∏—Å–∫–∞'
                        : (payload?.startsWith('donate_') ? '–î–æ–Ω–∞—Ç' : '–ü–ª–∞—Ç—ë–∂');

                    const text = [
                        'üí≥ –ü–æ–ª—É—á–µ–Ω –ø–ª–∞—Ç—ë–∂',
                        `–¢–∏–ø: ${kind}`,
                        `–û—Ç: ${payer} (id ${user_id})`,
                        `–°—É–º–º–∞: ${total} ${currency}`,
                        payload ? `Payload: ${payload}` : null,
                        successful.telegram_payment_charge_id ? `TG charge: ${successful.telegram_payment_charge_id}` : null
                    ].filter(Boolean).join('\n');

                    const adminChat = ADMIN_CHAT_ID
                        ? ADMIN_CHAT_ID
                        : (ADMIN_USERNAME.startsWith('@') ? ADMIN_USERNAME : '@' + ADMIN_USERNAME);

                    await fetch(`${API}/sendMessage`, {
                        method: 'POST',
                        headers: { 'content-type': 'application/json' },
                        body: JSON.stringify({ chat_id: adminChat, text })
                    });
                }
            } catch (e) {
                console.error('Admin notify error:', e);
            }

            return res.status(200).json({ ok: true });
        }

        return res.status(200).json({ ok: true });
    } catch (e) {
        console.error('WEBHOOK error:', e);
        return res.status(200).json({ ok: true }); // –≤—Å–µ–≥–¥–∞ 200, —á—Ç–æ–±—ã Telegram –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    }
}